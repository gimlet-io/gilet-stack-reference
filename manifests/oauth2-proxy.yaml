{{ if .oauth2Proxy.enabled -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oauth2-proxy-nginx
  namespace: infrastructure
data:
  nginx.conf: |
    worker_processes 5;

    events {
    }

    http {
      server {
        listen 80 default_server;

        location = /healthcheck {
          add_header Content-Type text/plain;
          return 200 'ok';
        }

        location ~ /redirect/(.*) {
          return 307 https://$1$is_args$args;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: oauth2-proxy
  name: oauth2-proxy
  namespace: infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: oauth2-proxy
  template:
    metadata:
      labels:
        k8s-app: oauth2-proxy
    spec:
      volumes:
        - name: nginx
          configMap:
            name: oauth2-proxy-nginx
      containers:
        - name: nginx
          image: nginx:1.19.3-alpine
          resources:
            limits:
              cpu: 0.2
              memory: 512Mi
          ports:
            - name: nginx
              containerPort: 80
          volumeMounts:
            - name: nginx
              mountPath: /etc/nginx/
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 80
            initialDelaySeconds: 3
            timeoutSeconds: 2
            failureThreshold: 2
        - name: oauth2-proxy
          image: quay.io/oauth2-proxy/oauth2-proxy:v7.1.2
          args:
            - --provider=github
            - --email-domain=*
            - --github-org={{ .oauth2Proxy.org }}
            - --github-user={{ .oauth2Proxy.user }}
            - --upstream=file:///dev/null
            - --upstream=http://localhost/redirect/
            - --http-address=0.0.0.0:4180
            - --cookie-domain=.{{ .nginx.host }}
            - --footer=-
          envFrom:
            - secretRef:
                name: oauth2-proxy
          ports:
            - containerPort: 4180
              protocol: TCP
              name: http
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: oauth2-proxy
  name: oauth2-proxy
  namespace: infrastructure
spec:
  ports:
    - name: http
      protocol: TCP
      targetPort: http
      port: 80
  selector:
    k8s-app: oauth2-proxy
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  {{- if .certManager.enabled }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
  {{- end }}
  name: oauth2-proxy
  namespace: infrastructure
spec:
  ingressClassName: {{ default false .nginx.enabled | ternary "nginx" "traefik" }}
  {{- if .certManager.enabled }}
  tls:
    - secretName: tls-oauth2-proxy
      hosts:
        - "auth.{{ default false .nginx.enabled | ternary .nginx.host .civo.host }}"
  {{- end }}
  rules:
    - host: "auth.{{ default false .nginx.enabled | ternary .nginx.host .civo.host }}"
      http:
        paths:
          - path: /
            pathType: "Prefix"
            backend:
              service:
                name: oauth2-proxy
                port:
                  name: "http"
---
apiVersion: v1
kind: Secret
metadata:
  name: oauth2-proxy
  namespace: infrastructure
stringData:
  OAUTH2_PROXY_CLIENT_ID: {{ .oauth2Proxy.clientID }}
  OAUTH2_PROXY_CLIENT_SECRET: {{ .oauth2Proxy.clientSecret }}
  OAUTH2_PROXY_COOKIE_SECRET: <<openssl rand -hex 16>>
{{- end }}
